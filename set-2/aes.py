from functools import lru_cache, reduce
import operator
import numpy as np
import struct


class polynomial:
    """
    Implements polynomials with coefficients in GF(2)
    representing the numbers used in AES operations
    """
    reducer = {8, 4, 3, 1, 0}
    def __init__(self, x=None, powers=None, modulus=None, field=None):
        if x is not None and powers is not None:
            raise ValueError("You cannot supply both the powers and a value to create a polynomial from.")
        if x is not None:
            self.powers = {i for i in range(x.bit_length() + 1) if x & (2 ** i) != 0}
        elif powers is not None:
            self.powers = powers
        else:
            self.powers = {}

    def __repr__(self):
        return " + ".join(f"x^{i}" for i in sorted(self.powers, reverse=True))

    def __add__(self, poly):
        if isinstance(poly, polynomial):
            powers = self.powers ^ poly.powers
            return polynomial(powers=powers)
        else:
            raise ValueError(f"Cannot add object of type polynomial to object of type {type(poly)}")

    def __mul__(self, poly):
        if isinstance(poly, int):
            poly = polynomial(poly)
        if isinstance(poly, polynomial):
            terms = reduce(operator.add, [[a+b for a in poly.powers] for b in self.powers])
            new_powers = {i for i in terms if terms.count(i) % 2 == 1}
            while max(new_powers) >= max(polynomial.reducer):
                a = max(new_powers) - max(polynomial.reducer)
                new_powers ^= {i+a for i in polynomial.reducer}
            return polynomial(powers=new_powers)
        else:
            raise ValueError(f"Cannot multiply object of type polynomial with object of type {type(poly)}")

    @property
    def value(self):
        return sum(2**i for i in self.powers)


def rcon(i: int) -> int:
    @lru_cache()
    def rc(i: int) -> int:
        if i == 1:
            return 1
        elif rc(i - 1) < 0x80:
            return 2 * rc(i - 1)
        else:
            return ((rc(i - 1) * 2) ^ 0x1B) & 0xFF

    return rc(i) << (3 * 8)


def S(c):
    s = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
    ]
    return s[c]


def RotWord(b):
    return (b >> 24) + ((b & 0xFF_FF_FF) << 8)


def SubWord(b):
    bs = struct.unpack("BBBB", b.to_bytes(4, "little"))
    ss = [S(c) for c in bs]
    return int.from_bytes(struct.pack("BBBB", *ss), "little")


def KeyExpansion(key, N):
    K = struct.unpack("I" * N, key)
    i = 0
    W = []
    while True:
        if i < N:
            W.append(K[i])
        elif i % N == 0:
            W.append(W[i - N] ^ SubWord(RotWord(W[i - 1])) ^ rcon(i))
        elif N > 6 and i % N == 4:
            W.append(W[i - N] ^ SubWord(W[i - 1]))
        else:
            W.append(W[i - N] ^ W[i - 1])
        i += 1
        if i % 4 == 0:
            yield (struct.pack("IIII", *W[-4:]))


def AddRoundKey(state, roundkey):
    return bytes((a ^ b for a, b in zip(state, roundkey)))


def SubBytes(state):
    return bytes((S(i) for i in state))


def ShiftRows(state):
    a = [0, 1, 2, 3, 5, 6, 7, 4, 10, 11, 8, 9, 15, 12, 13, 14]
    return bytes((state[i] for i in a))


def MixColunms(state):
    pass


if __name__ == "__main__":
    N = 4
    key = b"YELLOW SUBMARINE"
    iv = 0xC .to_bytes(16, "big")
    keygen = KeyExpansion(key, N)
    print(AddRoundKey(iv, next(keygen)))
    print(SubBytes(iv))
